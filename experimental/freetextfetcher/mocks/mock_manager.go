// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-api/experimental/freetextfetcher (interfaces: Manager)

// Package mock_freetext_fetcher is a generated GoMock package.
package mock_freetext_fetcher

import (
	gomock "github.com/golang/mock/gomock"
	logger "github.com/mattermost/mattermost-plugin-api/experimental/bot/logger"
	model "github.com/mattermost/mattermost-server/v6/model"
	plugin "github.com/mattermost/mattermost-server/v6/plugin"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Clear mocks base method
func (m *MockManager) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear
func (mr *MockManagerMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockManager)(nil).Clear))
}

// MessageHasBeenPosted mocks base method
func (m *MockManager) MessageHasBeenPosted(arg0 *plugin.Context, arg1 *model.Post, arg2 plugin.API, arg3 logger.Logger, arg4, arg5 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MessageHasBeenPosted", arg0, arg1, arg2, arg3, arg4, arg5)
}

// MessageHasBeenPosted indicates an expected call of MessageHasBeenPosted
func (mr *MockManagerMockRecorder) MessageHasBeenPosted(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageHasBeenPosted", reflect.TypeOf((*MockManager)(nil).MessageHasBeenPosted), arg0, arg1, arg2, arg3, arg4, arg5)
}
