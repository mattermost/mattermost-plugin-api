// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-api/experimental/flow/steps (interfaces: Step)

// Package mock_flow is a generated GoMock package.
package mock_flow

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	steps "github.com/mattermost/mattermost-plugin-api/experimental/flow/steps"
)

// MockStep is a mock of Step interface.
type MockStep struct {
	ctrl     *gomock.Controller
	recorder *MockStepMockRecorder
}

// MockStepMockRecorder is the mock recorder for MockStep.
type MockStepMockRecorder struct {
	mock *MockStep
}

// NewMockStep creates a new mock instance.
func NewMockStep(ctrl *gomock.Controller) *MockStep {
	mock := &MockStep{ctrl: ctrl}
	mock.recorder = &MockStepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStep) EXPECT() *MockStepMockRecorder {
	return m.recorder
}

// Attachment mocks base method.
func (m *MockStep) Attachment(arg0 string) steps.Attachment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attachment", arg0)
	ret0, _ := ret[0].(steps.Attachment)
	return ret0
}

// Attachment indicates an expected call of Attachment.
func (mr *MockStepMockRecorder) Attachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attachment", reflect.TypeOf((*MockStep)(nil).Attachment), arg0)
}

// GetPropertyName mocks base method.
func (m *MockStep) GetPropertyName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPropertyName indicates an expected call of GetPropertyName.
func (mr *MockStepMockRecorder) GetPropertyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyName", reflect.TypeOf((*MockStep)(nil).GetPropertyName))
}

// IsEmpty mocks base method.
func (m *MockStep) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockStepMockRecorder) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockStep)(nil).IsEmpty))
}
